buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.talend.com" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath fileTree(dir: 'lib/', include: ['*.jar'])
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: docbookXsltVersion
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.4.0'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.3.2-99'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '3.0.2'
  }
}

plugins {
  id "de.undercouch.download" version "4.0.4"
  id "groovy"
}

repositories {
  mavenLocal()
  mavenCentral()
}

// Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force 'org.xmlresolver:xmlresolver:3.0.2'
  }
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    [group: 'org.relaxng', name: 'jing', version: '20181204'],
    [group: 'org.relaxng', name: 'trang', version: '20181204']
  )
}

defaultTasks 'allspecs'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

// ======================================================================

task allspecs(dependsOn: [ "buildspecs", "make_etc" ]) {
}

task buildspecs() {
  // dependencies are added by the specs
}

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

def deltaxml() {
  def dxml = file("deltaxml")
  if (dxml.exists() && dxml.isDirectory()) {
    return "diff"
  } else {
    return ""
  }
}

// ======================================================================
// Make sure that step build artifacts get published so that they
// can be used by the build process for the language specification
// (Particularly, to build the combined language schema file.)

task make_etc() {
    // nop
}

["steps", "step-file", "step-os", "step-paged-media",
 "step-run", "step-text", "step-mail", "step-rdf", "step-validation",
 "step-ixml" ].each { spec ->
  Task t = task "copy_${spec}_build"(dependsOn: [ "buildspecs" ], type: Copy) {
    from "$spec/build/"
    exclude "xinclude.xml", "examples/**", "graphics/**", "glossary.xml"
    into "$buildDir/dist/etc/$spec/"
    doFirst { mkdir "$buildDir/dist/etc/$spec" }
  }
  make_etc.dependsOn t
}

// ======================================================================
// We need the core RNG grammars

task xproc_schemas(dependsOn: [ "download_core30" ]) {
    // nop
}

task download_core30(type: Download) {
    src "$schemaBaseUri/lib/core30.rng"
    dest file("build/core30.rng")
}
download_core30.onlyIf { !file("$buildDir/core30.rng").exists() }

[ "rnc", "rng" ].each { ext ->
    ["xproc", "xproc10", "xproc30"].each { base ->
        Task t = task "download_${base}_${ext}"(type: Download) {
            src "$schemaBaseUri/relax-ng/$base.$ext"
            dest file("build/$base.$ext")
        }
        t.onlyIf { ! file("$buildDir/$base.$ext").exists () }
        xproc_schemas.dependsOn t
    }
}

// ======================================================================
// We need the ToC for the langeuage specification; download it if
// we don't already have it.

task download_xproc_toc(type: Download) {
  src xprocTocUri
  dest file("build/xproc/toc.xml")
}
download_xproc_toc.onlyIf { !file("$buildDir/xproc/toc.xml").exists() }

task download_steps_toc(type: Download) {
  src stepsTocUri
  dest file("build/steps/toc.xml")
}
download_steps_toc.onlyIf { !file("$buildDir/steps/toc.xml").exists() }

// ======================================================================
// Specification schemas

task spec_schemas(dependsOn: [ "spec_rng", "spec_sch" ]) {
  // nop
}

task spec_rng(type: JavaExec) {
  inputs.files fileTree(dir: "schema/")
  outputs.file "build/schema/dbspec.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/dbspec.rnc", "build/schema/dbspec.rng"]
}
spec_rng.doFirst {
  mkdir("build/schema")
}

task spec_sch(type: Copy) {
  from('schema') {
    include "docbook.sch"
  }
  into "build/schema"
}
spec_sch.doFirst {
  mkdir("build/schema")
}

// ======================================================================
// steps

def buildAbsDir = file("build/dist").getAbsolutePath()

task steps(dependsOn: [ "download_xproc_toc", "xproc_schemas", "spec_schemas",
                        "steps:specification", "steps_assets", "steps_src",
                        "steps_xpl" ],
           type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "steps/build/source.xml")
  output("result", "build/dist/steps/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "steps")
  option("diffloc", buildAbsDir + "/steps/diff.html")
  option("lcdiffloc", buildAbsDir + "/steps/lcdiff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "steps"

task steps_pdf_xform(dependsOn: [ "steps" ], type: XMLCalabashTask) {
  inputs.file "${projectDir}/tools/xsl/htmlprint.xsl"
  inputs.file "${buildDir}/dist/steps/index.html"
  outputs.file "${buildDir}/dist/steps/pdf.html"

  input("source", "${buildDir}/dist/steps/index.html")
  output("result", "${buildDir}/dist/steps/pdf.html")

  pipeline "tools/xpl/pdfspec.xpl"
}

task steps_pdf(dependsOn: ["steps_pdf_a4", "steps_pdf_letter"]) {
  // nop
}

task steps_pdf_a4(dependsOn: [ "steps_pdf_xform", "steps_assets"], type: Exec) {
  inputs.files fileTree(dir: "${projectDir}/tools/xsl/")
  inputs.file "${buildDir}/dist/steps/pdf.html"
  inputs.files fileTree(dir: "${buildDir}/dist/steps/css")
  inputs.files fileTree(dir: "${projectDir}/tools/xpl/")
  inputs.files fileTree(dir: "${projectDir}/steps/src/")
  outputs.file "${buildDir}/dist/steps/steps_a4.pdf" 

  doFirst {
    copy {
      from("${projectDir}/src/main/resources/css") {
        include "print-a4.css"
      }
      into "${buildDir}/dist/steps/css"
      rename ("print-a4.css", "print.css")
    }
  }

  commandLine "/usr/local/AHFormatterV72/bin/AHFCmd",
    "-f", "xhtml", "-d", "${buildDir}/dist/steps/pdf.html",
    "-o", "${buildDir}/dist/steps/steps_a4.pdf"
}

task steps_pdf_letter(dependsOn: [ "steps_pdf_xform", "steps_assets"], type: Exec) {
  inputs.files fileTree(dir: "${projectDir}/tools/xsl/")
  inputs.file "${buildDir}/dist/steps/pdf.html"
  inputs.files fileTree(dir: "${buildDir}/dist/steps/css")
  inputs.files fileTree(dir: "${projectDir}/tools/xpl/")
  inputs.files fileTree(dir: "${projectDir}/steps/src/")
  outputs.file "${buildDir}/dist/steps/steps_letter.pdf" 

  doFirst {
    copy {
      from("${projectDir}/src/main/resources/css") {
        include "print-letter.css"
      }
      into "${buildDir}/dist/steps/css"
      rename ("print-letter.css", "print.css")
    }
  }

  commandLine "/usr/local/AHFormatterV72/bin/AHFCmd",
    "-f", "xhtml", "-d", "${buildDir}/dist/steps/pdf.html",
    "-o", "${buildDir}/dist/steps/steps_letter.pdf"
}

task steps_assets(type: Copy) {
  from ("${projectDir}/src/main/resources") {
    exclude "css/print-a4.css"
    exclude "css/print-letter.css"
  }
  into "build/dist/steps/"
}

task steps_src(dependsOn: ["steps:source"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task steps_xpl(dependsOn: ["steps:library"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-validation

task step_validation(type: DocBookTask,
                     dependsOn: [ "download_xproc_toc",
                                  "steps", "xproc_schemas", "spec_schemas",
                                  "step-validation:specification",
                                  "step_validation_assets", "step_validation_src",
                                  "step_validation_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-validation/build/source.xml")
  output("result", "build/dist/validation/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "validation")
  option("diffloc", buildAbsDir + "/validation/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_validation"

task step_validation_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/validation/"
}

task step_validation_src(dependsOn: ["step-validation:source"], type: Copy) {
  from "step-validation/build/"
  into "build/dist/validation/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_validation_xpl(dependsOn: ["step-validation:library"], type: Copy) {
  from "step-validation/build/"
  into "build/dist/validation/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-os

task step_os(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-os:specification",
                            "step_os_assets",
                            "step_os_src", "step_os_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-os/build/source.xml")
  output("result", "build/dist/os/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "os")
  option("diffloc", buildAbsDir + "/os/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_os"

task step_os_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/os/"
}

task step_os_src(dependsOn: ["step-os:source"], type: Copy) {
  from "step-os/build/"
  into "build/dist/os/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_os_xpl(dependsOn: ["step-os:library"], type: Copy) {
  from "step-os/build/"
  into "build/dist/os/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-run

task step_run(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-run:specification",
                            "step_run_assets",
                            "step_run_src" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-run/build/source.xml")
  output("result", "build/dist/run/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "run")
  option("diffloc", buildAbsDir + "/run/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_run"

task step_run_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/run/"
}

task step_run_src(dependsOn: ["step-run:source"], type: Copy) {
  from "step-run/build/"
  into "build/dist/run/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// step-ixml

task step_ixml(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-ixml:specification",
                            "step_ixml_assets",
                            "step_ixml_src" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-ixml/build/source.xml")
  output("result", "build/dist/ixml/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "ixml")
  option("diffloc", buildAbsDir + "/ixml/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_ixml"

task step_ixml_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/ixml/"
}

task step_ixml_src(dependsOn: ["step-ixml:source"], type: Copy) {
  from "step-ixml/build/"
  into "build/dist/ixml/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// step-paged-media

task step_paged_media(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-paged-media:specification",
                            "step_paged_media_assets",
                            "step_paged_media_src", "step_paged_media_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-paged-media/build/source.xml")
  output("result", "build/dist/paged-media/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "paged-media")
  option("diffloc", buildAbsDir + "/paged-media/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_paged_media"

task step_paged_media_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/paged-media/"
}

task step_paged_media_src(dependsOn: ["step-paged-media:source"], type: Copy) {
  from "step-paged-media/build/"
  into "build/dist/paged-media/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_paged_media_xpl(dependsOn: ["step-paged-media:library"], type: Copy) {
  from "step-paged-media/build/"
  into "build/dist/paged-media/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-file

task step_file(type: DocBookTask,
               dependsOn: [ "download_xproc_toc", "download_steps_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-file:specification",
                            "step_file_assets",
                            "step_file_src", "step_file_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-file/build/source.xml")
  output("result", "build/dist/file/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "file")
  option("diffloc", buildAbsDir + "/file/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_file"

task step_file_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/file/"
}

task step_file_src(dependsOn: ["step-file:source"], type: Copy) {
  from "step-file/build/"
  into "build/dist/file/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_file_xpl(dependsOn: ["step-file:library"], type: Copy) {
  from "step-file/build/"
  into "build/dist/file/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-text

task step_text(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-text:specification",
                            "step_text_assets",
                            "step_text_src", "step_text_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-text/build/source.xml")
  output("result", "build/dist/text/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "text")
  option("diffloc", buildAbsDir + "/text/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_text"

task step_text_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/text/"
}

task step_text_src(dependsOn: ["step-text:source"], type: Copy) {
  from "step-text/build/"
  into "build/dist/text/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_text_xpl(dependsOn: ["step-text:library"], type: Copy) {
  from "step-text/build/"
  into "build/dist/text/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-mail

task step_mail(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-mail:specification",
                            "step_mail_assets",
                            "step_mail_src", "step_mail_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-mail/build/source.xml")
  output("result", "build/dist/mail/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "mail")
  option("diffloc", buildAbsDir + "/mail/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_mail"

task step_mail_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/mail/"
}

task step_mail_src(dependsOn: ["step-mail:source"], type: Copy) {
  from "step-mail/build/"
  into "build/dist/mail/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_mail_xpl(dependsOn: ["step-mail:library"], type: Copy) {
  from "step-mail/build/"
  into "build/dist/mail/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-rdf

task step_rdf(type: DocBookTask,
               dependsOn: [ "download_xproc_toc",
                            "steps", "xproc_schemas", "spec_schemas",
                            "step-rdf:specification",
                            "step_rdf_assets",
                            "step_rdf_src", "step_rdf_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "build/xproc/toc.xml"
  input("source", "step-rdf/build/source.xml")
  output("result", "build/dist/rdf/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("circleci", getenv("CIRCLECI"))
  param("circleci-commit", getenv("CIRCLE_SHA1"))
  param("circleci-build-number", getenv("CIRCLE_BUILD_NUM"))
  param("circleci-user", getenv("CIRCLE_PROJECT_USERNAME"))
  param("circleci-repo", getenv("CIRCLE_PROJECT_REPONAME"))
  param("circleci-branch", getenv("CIRCLE_BRANCH"))
  param("circleci-tag", getenv("CIRCLE_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "rdf")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_rdf"

task step_rdf_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/rdf/"
}

task step_rdf_src(dependsOn: ["step-rdf:source"], type: Copy) {
  from "step-rdf/build/"
  into "build/dist/rdf/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_rdf_xpl(dependsOn: ["step-rdf:library"], type: Copy) {
  from "step-rdf/build/"
  into "build/dist/rdf/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}

