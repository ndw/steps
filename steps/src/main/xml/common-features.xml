<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0-extension w3c-xproc"
         xml:id="common-features">
<title>Features common to all steps</title>

<para>The types given for options should be understood as follows:</para>
<itemizedlist>
  <listitem>
    <para>Types in the XML Schema namespace, identified as QNames with the
    <code>xs:</code> prefix, as per the XML Schema specification with one
    exception. Anywhere an <code>xs:QName</code> is specified,
    an
    <link xlink:href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</link>
    is allowed.</para>
  </listitem>
  <listitem>
    <para><type>XPathExpression</type>:
    As a string per <biblioref linkend="xmlschema-2"/>, including
    whitespace normalization, and the further requirement to be a
    conformant Expression per <biblioref linkend="xpath31"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>XSLTSelectionPattern</type>: An XSLT pattern.
    </para>
  </listitem>
  <listitem>
    <para><type>XPathSequenceType</type>: An XPath
    <link xlink:href="https://www.w3.org/TR/xpath-31/#id-types">sequence type</link>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentType</type>: A media type as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentTypes</type>:
    As a whitespace separated list of media types as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
</itemizedlist>

<para>Option values are often expressed using <link
linkend="option-shortcut">the shortcut syntax</link>. In these cases,
the option shortcuts are generally treated as <link
linkend="value-templates">value templates</link>. However, for options
of type <code>map()</code> or <code>array()</code>, an expression is
<emphasis>required</emphasis> (there is no non-expression string which
can ever be a legal value for a map or array). Given that every value
entered this way will have to be a value template, and consequently
every curly brace contained within the expression will have to be
escaped, values of type map or array are defined to be expressions
directly.</para>

<para>Some aspects of documents are generally unchanged by steps:</para>

<itemizedlist>
<listitem>
<para>When a step in this library produces an output document,
the base URI of the output is the base URI of the step's primary
input document unless the step's process explicitly sets an
<tag class="attribute">xml:base</tag> attribute or the step's
description explicitly states how the base URI is constructed.</para>
</listitem>
<listitem>
<para>Each step describes how it modifies the document properties of
the documents that flow through it.</para>
<para>A great many steps indicate that they preserve some or all of
the properties of the input document. It should be noted that in some
cases the transformation performed by the step will violate the
condition associated with some property. In general, the steps cannot
know this and the pipeline author is responsible for managing the
properties with greater care in this case.
</para>
</listitem>
</itemizedlist>

<para>When a step uses an XPath to compute an option value, the XPath
context is as defined in <biblioref linkend="xproc31"/>.</para>

<para>When a step specifies a particular version of a technology,
implementations <rfc2119>must</rfc2119> implement that
version or a subsequent version that is backwards compatible with that
version. At user-option, they may implement other non-backwards
compatible versions.</para>

<section xml:id="common-options">
<title>Common options</title>

<para>All XProc steps <rfc2119>must</rfc2119> accept the option
<option>p:timeout</option>. As a debugging tool this option can be
used to tell the XProc processor that a step with such an option
should be terminated if its execution does take more time than
expected. The value of the <option>p:timeout</option> option must be a
<type>xs:positiveInteger</type>. It is interpreted as the maximal
number of seconds the step is expected to run. The measurement of time
starts after all bindings for input ports and all options are
evaluated. If the XProc processor realizes a longer runtime, it should
terminate the execution of the step as soon as possible, do cleanup to
ensure proper execution of other steps in the pipeline and then raise
a dynamic error.</para>

<para><error code="D0053">It is a <glossterm>dynamic error</glossterm> if a step runs 
longer than its timeout value.</error> <impl>It is
<glossterm>implementation-defined</glossterm> whether a processor supports
timeouts, and if it does, how precisely and precisely how the
execution time of a step is measured.</impl>
</para>

<note>
<title>Note</title>
<para>Since the exact time a step takes to perform its task depends on
the used computer, the XProc processor's execution strategy, the
system load etc., this feature can not be used as an exact timing tool
in XProc. Execution times may vary on different executions of the same
pipeline on the same computer and the same XProc processor due to
execution contingencies. Developers are advised to calculate the value
for p:timeout generously, so the dynamic error is raised only in
extreme cases.</para>
</note>

<note>
<title>Note</title>
<para>Note that the name of this option is <option>p:timeout</option>
even on steps in the XProc namespace. This limits the extent to which the
option restricts the space of available option names for steps.
(If the option name wasn’t in a namespace, then no step could have an option
named “<literal>timeout</literal>” which seems unreasonable.)
</para>
</note>
</section>
</section>
