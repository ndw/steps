<section xmlns="http://docbook.org/ns/docbook" xmlns:p="http://www.w3.org/ns/xproc"
  xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="c.archive">

  <title>p:archive</title>

  <para>The <code>p:archive</code> step outputs on its <port>result</port> port an archive (usually
    binary) document, for instance a ZIP file. A specification of the contents of the archive may be
    specified in a manifest XML document on the <port>manifest</port> port. The step produces a
    report on the <port>report</port> port, which contains the manifest, amended with additional
    information about the archiving.</para>

  <p:declare-step type="p:archive">
    <p:input port="source" primary="true" content-types="any" sequence="true"/>
    <p:input port="manifest" content-types="xml" sequence="true">
      <p:empty/>
    </p:input>
    <p:input port="archive" content-types="any" sequence="true">
      <p:empty/>
    </p:input>
    <p:output port="result" primary="true" content-types="any" sequence="false"/>
    <p:output port="report" content-types="application/xml" sequence="false"/>
    <p:option name="format" as="xs:QName" select="'zip'"/>
    <p:option name="relative-to" as="xs:anyURI?"/>
    <p:option name="parameters" as="map(xs:QName, item()*)?"/>
  </p:declare-step>

  <para>The <code>p:archive</code> step can perform several different operations on archives. The
    most common one will likely be creating an archive, but it could also, depending on the archive
    format, provide services like update, freshen or even merge. The only format implementations
      <rfc2119>must</rfc2119> support is <biblioref linkend="zip"/>. <impl>The list of formats
      supported by the <tag>p:archive</tag> step is
      <glossterm>implementation-defined</glossterm>.</impl></para>

  <para>The <code>p:archive</code> step has the following input ports:</para>
  <variablelist>
    <varlistentry>
      <term><port>source</port></term>
      <listitem>
        <para>The (primary) <port>source</port> port is used to provide documents to be archived
          (for instance constructed by other steps). How and which of these documents are processed
          is governed by the document(s) appearing on the other input ports and the combination of
          options and parameters. See below for details. <error code="C0084">It is a
              <glossterm>dynamic error</glossterm> if two or more documents appear on the <code>p:archive</code>
            step's <port>source</port> port that have the same base URI or if any document that
        appears on the <port>source</port> port has no base URI.</error></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><port>manifest</port></term>
      <listitem>
        <para>The <port>manifest</port> port can receive a manifest document that tells the step how
          to construct the archive. If no manifest document is provided on this port, a default
          manifest is constructed automatically. See <xref linkend="cv.archive-manifest"/>. <error
            code="C0100">It is a <glossterm>dynamic error</glossterm> if the document on port
              <port>manifest</port> does not conform to the given schema.</error>
        </para>
        <para><error code="C0112">It is a <glossterm>dynamic error</glossterm> if more than one
            document appears on the port <port>manifest</port>.</error></para>
        <para>The default input for this port is the empty sequence.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><port>archive</port></term>
      <listitem>
        <para>The <port>archive</port> port is used to provide the step with existing archive(s) for
          operations like update, freshen or merge. Handling of ZIP files supports modifying
          archives appearing on the <port>archive</port> port (<xref linkend="cv.archive-zips"/>).
            <impl>The list of archive formats that can be modified by <tag>p:archive</tag> is
              <glossterm>implementation-defined</glossterm>.</impl> For instance an implementation
          that supports archive merging may accept more than one document on the
            <port>archive</port> port.</para>
        <para>The default input for this port is the empty sequence.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The <code>p:archive</code> step has the following output ports:</para>
  <variablelist>
    <varlistentry>
      <term><port>result</port></term>
      <listitem>
        <para>The (primary) <port>result</port> port will output the resulting archive.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><port>report</port></term>
      <listitem>
        <para>The <port>report</port> port will output a report about the archiving operation. This
          will be the same as the manifest (as provided on the <port>manifest</port> port or
          automatically created if there was no manifest provided), optionally amended with
          additional attributes and/or elements. <impl>The semantics of any additional attributes,
            elements and their values are
          <glossterm>implementation-defined</glossterm>.</impl></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The <code>p:archive</code> step has the following options:</para>
  <variablelist>
    <varlistentry>
      <term><option>format</option></term>
      <listitem>
        <para>The format of the archive can be specified using the <option>format</option> option.
          Implementations <rfc2119>must</rfc2119> support the <biblioref linkend="zip"/> format,
          specified with the value <code>zip</code>. <impl>It is
              <glossterm>implementation-defined</glossterm> what other formats are
          supported.</impl></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>parameters</option></term>
      <listitem>
        <para>The <option>parameters</option> option can be used to supply parameters to control the
          archiving. <impl>The semantics of the keys and the allowed values for these keys are
              <glossterm>implementation-defined</glossterm>.</impl>
          <error code="C0079">It is a <glossterm>dynamic error</glossterm> if the map
              <option>parameters</option> contains an entry whose key is defined by the
            implementation and whose value is not valid for that key.</error></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>relative-to</option></term>
      <listitem>
        <para>The <option>relative-to</option> option is used in creating a manifest when no
          manifest is provided on the <port>manifest</port> port. If a manifest is present this option is
          not used. If the option&#x2019;s value is a relative URI, it is made absolute against the
          base URI of the element on which it is specified (<tag>p:with-option</tag> or the step in
          case of a syntactic shortcut value). <error code="D0064">It is a <glossterm>dynamic
              error</glossterm> if the base URI is not both absolute and valid according to
              <biblioref linkend="rfc3986"/>.</error></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The format of the archive is determined as follows:</para>
  <itemizedlist>
    <listitem>
      <para>If the <option>format</option> option is specified, this determines the format of the
        archive. Implementations <rfc2119>must</rfc2119> support the <biblioref linkend="zip"/>
        format, specified with the value <code>zip</code>. <impl>It is
            <glossterm>implementation-defined</glossterm> what other formats are supported.</impl>
        <error code="C0081">It is a <glossterm>dynamic error</glossterm> if the format of the
          archive does not match the format as specified in the <option>format</option>
          option.</error></para>
    </listitem>
    <listitem>
      <para>If no <option>format</option> option is specified or if its value is the empty sequence,
        the archive's format will be determined by the step, using the <code>content-type</code>
        document-property of the document on the <port>archive</port> port and/or by inspecting its
        contents. <impl>It is <glossterm>implementation-defined</glossterm> how the step determines
          the archive's format.</impl> Implementations <rfc2119>should</rfc2119> recognize archives
        in <biblioref linkend="zip"/> format. </para>
    </listitem>
  </itemizedlist>

  <para><error code="C0085">It is a <glossterm>dynamic error</glossterm> if the format of the archive 
    cannot be understood, determined and/or processed.</error></para>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <section xml:id="cv.archive-manifest">
    <title>The archive manifest</title>

    <para>An archive manifest specifies which documents will be considered in processing the
    archive. Every entry in the archive must have a corresponding entry in the manifest; if no such
    entry is provided, one will be constructed automatically (see below). If manifest entries are
    provided for documents that <emphasis>are not</emphasis> in the archive, how those are processed
    depends on the archive type and the parameters passed to the step.</para>

    <para>A manifest is represented by a <tag>c:archive</tag> root element:</para>

    <e:rng-pattern name="VocabArchive" xml:id="cv.archive"/>

    <para><impl>The <code>c:archive</code> root element may contain additional
    <glossterm>implementation-defined</glossterm> attributes.</impl></para>

    <para>All entries in the archive must be present as <tag>c:entry</tag> child elements:</para>

    <e:rng-pattern name="VocabEntry" xml:id="cv.entry"/>

    <itemizedlist>
      <listitem>
        <para>The <code>name</code> attribute specifies the name of the entry in the archive.</para>
      </listitem>
      <listitem>
        <para>The <code>href</code> attribute must be a valid URI according to
          <biblioref linkend="rfc3986"/>. If its value is relative, it is made absolute
          against the base URI of the manifest. There are two possible cases:</para>

        <itemizedlist>
        <listitem>
        <para>If the (absolute) <code>href</code> value is exactly the same as the base URI of a
        document appearing on the <port>source</port> port, that document is associated with this
        entry. If this entry is to be added to the archive, the associated document will be used.
        (The <code>serialization</code> document property can be used to provide serialization
        properties.)
        </para>
        </listitem>

        <listitem>
        <para>If no document on the <port>source</port> port has a base URI that is exactly the same
        as the (absolute) <code>href</code> value, the document at the specified URI is associated
        with this entry. These documents are stored in the archive “as is”; they
        <rfc2119>must not</rfc2119> be parsed and re-serialized.</para>
        </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>The <code>method</code> attribute specifies how the entry should be compressed.
            <impl>The default compression method is <glossterm>implementation-defined</glossterm>.
          </impl>Implementations <rfc2119>must</rfc2119> support no compression, specified with the
          value <code>none</code>. <impl>It is <glossterm>implementation-defined</glossterm> what
            other compression methods are supported.</impl></para>
      </listitem>
      <listitem>
        <para>The <code>level</code> attribute specifies the level of compression. <impl>The default
            compression method is <glossterm>implementation-defined</glossterm>. </impl>
          <impl>It is <glossterm>implementation-defined</glossterm> what compression levels are
            supported.</impl></para>
      </listitem>
      <listitem>
        <para>The <code>content-type</code> attribute specifies the content-type of the entry as
          detected by the processor. It will be set by <tag>p:archive-manifest</tag> in constructing
          the manifest. It will be ignored by <tag>p:archive</tag>.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>p:archive</code> step <rfc2119>should</rfc2119> strive to retain the order of
      the <tag>c:entry</tag> elements when constructing the archive. For instance, an e-book in EPUB
      format has a non-compressed entry that must be first in the archive. It should be possible to
      construct such an archive using <code>p:archive</code>.</para>

    <para><impl>The <code>c:entry</code> elements may contain additional
          <glossterm>implementation-defined</glossterm> attributes.</impl></para>

    <para>If no manifest entry is provided for a document appearing on the <port>source</port> port,
      the step will create a manifest entry for the document.
      (If no document arrives on the <port>manifest</port> port at all, a complete manifest
      document will be created.)</para>

    <para>In a constructed manifest entry:</para>

    <itemizedlist>
    <listitem>
    <para>The entry’s <tag class="attribute">href</tag> value is the base URI of the document.
    </para>
    </listitem>
    <listitem>
    <para>The entry’s <tag class="attribute">name</tag> value is derived from the base URI of
    the document and the <option>relative-to</option> option.</para>
    <itemizedlist>
    <listitem>
    <para>First, the value of the <option>relative-to</option> option is made absolute. If the
    initial substring of the base URI is exactly the same as the resulting absolute value, then the
    <tag class="attribute">name</tag> is the portion of the base URI that follows that initial
    substring.
    </para>
    </listitem>
    <listitem>
    <para>If there is no <option>relative-to</option> option or if its value is not the initial
    substring of the base URI of the document, the name is the <emphasis>path</emphasis> portion of
    the URI (per <biblioref linkend="rfc3986"/>). If the path portion begins with an initial slash,
    that slash is removed.
    </para>
    </listitem>
    </itemizedlist>
    </listitem>
    </itemizedlist>
    
    <para>
      <error code="C0118">It is a <glossterm>dynamic error</glossterm> if an archive manifest is
        invalid according to the specification.</error></para>
  </section>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <section xml:id="cv.archive-zips">
    <title>Handling of ZIP archives</title>

    <para>The format of the archive can be specified using the <option>format</option> option.
      Implementations <rfc2119>must</rfc2119> support the <biblioref linkend="zip"/> format,
      specified with the value <code>zip</code>. </para>

   <para>When ZIP archives are processed, every <tag class="attribute">name</tag> in the
   manifest must be a relative path without a leading slash.</para>

    <para>The <option>parameters</option> option can be used to supply parameters to control the
      archiving. For the <code>zip</code> format, the following parameters <rfc2119>must</rfc2119>
      be supported:</para>

    <variablelist>
      <varlistentry>
        <term><code>command</code></term>
        <listitem>
          <para>Specifies what operation to perform. If not specified, its default value is
              <literal>update</literal>. Implementations must support the values <literal>update</literal>,
              <literal>create</literal>, <literal>freshen</literal>, and <literal>delete</literal>.
              <impl>The <tag>p:archive</tag> step may support additional,
              <glossterm>implementation-defined</glossterm> commands for ZIP files.</impl>
              Unless otherwise specified, exactly zero or one ZIP archive can appear on the
              <port>archive</port> port for the commands described below. If no archive appears,
              a new archive will be created.
          </para>

          <variablelist>
            <varlistentry>
              <term><code>update</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>update</code>, the
                ZIP archive will be updated:</para>

                <orderedlist>
                  <listitem>
                    <para>For every entry in the ZIP file:</para>
                    <itemizedlist>
                      <listitem>
                        <para>If the manifest contains a <tag>c:entry</tag> with a matching
                        <tag class="attribute">name</tag>, the entry in the ZIP file is updated with
                        the document identified by the <tag>c:entry</tag> in the manifest.</para>
                      </listitem>
                      <listitem>
                        <para>If the manifest does not contain a matching <tag>c:entry</tag>, the
                        ZIP entry name is resolved against the base URI of the ZIP file.</para>
                        <itemizedlist>
                          <listitem>
                            <para>If a document exists at that URI and either has no timestamp or has a timestamp
                            more than the timestamp in the ZIP file, the entry in the ZIP file will be updated
                            with the document at the resolved URI.</para>
                          </listitem>
                          <listitem>
                            <para>If no document exists at that URI, or the document cannot be accessed,
                            or the document has a timestamp and the timestamp in the ZIP archive is more recent
                            than the timestamp of the document, then the ZIP entry is unchanged.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                  <listitem>
                    <para>For every <tag>c:entry</tag> in the manifest that does not have a matching
                    entry in the ZIP file, the ZIP file will be updated by adding the document identified
                    by the <tag>c:entry</tag> to the ZIP file.</para>
                  </listitem>
                </orderedlist>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>create</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>create</code>,
                the ZIP archive will be created. Creating a ZIP archive behaves exactly like
                <literal>update</literal> except that any timestamps
                are ignored; every ZIP entry will be updated or created if there is a <tag>c:entry</tag> or
                  matching document for it. The document must be obtained by dereferencing the URI in 
                  <option>href</option>. <error code="D0011">It is a <glossterm>dynamic error</glossterm>
                    if the resource referenced by the <option>href</option> option does not exist, cannot be
                    accessed or is not a file.</error></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>freshen</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>freshen</code>,
                existing files in the ZIP archive may be updated, but no new files will be added.
                Freshing a ZIP archive behaves exactly like <literal>update</literal> except that
                only entries that already exist in the ZIP archive are considered.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>delete</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>delete</code>,
                exactly one document in ZIP format must appear on the <port>archive</port> port.
                For every entry in the ZIP file:</para>
                <itemizedlist>
                  <listitem>
                    <para>If the manifest contains a <tag>c:entry</tag> with a matching
                    <tag class="attribute">name</tag>, the entry in the ZIP file is removed from
                    the ZIP archive.</para>
                  </listitem>
                </itemizedlist>
                <para>If the manifest contains <tag>c:entry</tag>
                elements which do not have a matching entry in the ZIP
                archive, they are simply ignored.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>level</code></term>
        <listitem>
          <para>Specifies the default compression level for files added to or updated in the
            archive. If the <tag class="attribute">level</tag> attribute is specified on a
            <tag>c:entry</tag>, its value takes precedence for that entry.
            Values that must be supported for ZIP files are:
              “<code>smallest</code>”, “<code>fastest</code>”, “<code>default</code>”,
              “<code>huffman</code>”, and “<code>none</code>”.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>method</code></term>
        <listitem>
          <para>Specifies the default compression method for files added to or updated in the
            archive. If the <tag class="attribute">method</tag> attribute is specified on a
            <tag>c:entry</tag>, its value takes precedence for that entry.
            Values that must be supported for ZIP files are:
              “<code>none</code>” and “<code>deflated</code>”.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para><error code="C0080">It is a <glossterm>dynamic error</glossterm> if the number of
        documents on the <port>archive</port> does not match the expected number of archive input
        documents for the given <code>format</code> and <code>command</code>.</error></para>

    <para>Implementations of other archive formats <rfc2119>should</rfc2119> use the same parameter
      names if applicable. The value spaces for these parameters may be format-specific though.
        <impl>The actual parameter names supported by <tag>p:archive</tag> for a particular format
        are <glossterm>implementation-defined</glossterm>.</impl></para>

  </section>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <simplesect>
    <title>Document properties</title>
    <para feature="archive-preserves-none">No document properties are preserved.
The archive has no <property>base-uri</property>.</para>
  </simplesect>

</section>
